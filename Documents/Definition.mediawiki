= Object Oriented Programming Languages Pattern =

== Mandatory ==
*	Always use Camel notation. 
*	Do NOT use acronyms and reduced words.
*	All code should be written in english.
*	The name of every structure should show the type of the structure, unless its void or a class.
*	Do NOT use special characters like: _.
*	Given name (doesn't matter if it is variable, method, class, or etc.) should consist of a more general to more specific feature, from left to right like this: data type + given name (if different from the data type)  + relative type (if any) + state (if any).
*	The size of Array (if its has a fixed size) should be specified in the name of the variable.
=== Examples ===
*	<code>int port; </code> => <code>int intPortLocal;</code>
*	<code>int portHost; </code> => <code>int intPortHost;</code>
*	<code>SocketAddress socketAddress; </code> => <code>SocketAddress socketAddressLocal;</code>
*	<code>int[] example = new int[50]; </code> => <code>int[] array50IntExample = new int[50];</code>
*	<code>int[][] example = new int[50][25]; </code> => <code>int[][] array50x25IntExample = new int[50][25];</code>
=== Structure ===
*	Tab size should be equivalent to 5 spaces.
*	If structure ultrapass 100 charateres wrap where necessary.
*	Open braces, open parentheses, open brackets, less than always should be aside of last element, without spaces and new lines.
*	Close braces, close parentheses, close brackets, bigger than always should be aside of semicolon, if it has, without spaces and new lines.
*	if the struture permits braces, use them.
=== Files, Packages and Namespaces  ===
*	A fully-qualified namespace and class must have the following structure <code>\<Vendor Name>\<File Type>\<Namespace>\<Class Name></code>
*	Each namespace must have a top-level namespace ("Vendor Name").
*	Each namespace can have as many sub-namespaces as it wishes.
*	Should start as upper case.
==== Examples ====
*	<code>\Doctrine\Common\IsolatedClassLoader</code> => <code>/Path/To/Project/Library/4CarrUs/Php/Doctrine/Common/IsolatedClassLoader.php</code>
*	<code>\Symfony\Core\Request</code> => <code>/Path/To/Project/Library/Vendor/Php/Symfony/Core/Request.php</code>
*	<code>\Zend\Acl</code> => <code>/Path/To/Project/Library/Vendor/Stylesheet/Zend/Acl.css</code>
*	<code>\Zend\Mail\Message</code> => <code>/Path/To/Project/Library/Vendor/Java/Zend/Mail/Message.java</code>
=== Classes, Objects, Variables, Functions, Methods and other structures ===
*	If possible always make its visibility private, if not make them protected, if still not possible then you make them public.
==== Constructor ====
*	Always the constructor should have all possible elements, and should be private.
*	To instantiate the class, should have a static method to call the constructor and return the object.
===== Examples =====
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	private function __construct($stringName, $stringType, $stringClassElement) {
		$this->stringName = $stringName;
		$this->stringType = $stringType;
		$this->stringClassElement = $stringClassElement;
		$this->stringPseudoClass = "";
		$this->stringPseudoElement = "";
		$this->attribute = "";
		$this->listDeclaration = array();
	}

	//Constructors
	//   instantiation: 
	//      $selector = Selector::selectorWithStringName($stringName);
	//      $selector = Selector::selectorWithStringNameWithStringType($stringName, $stringType);
       	
	public static function selectorWithStringName($stringName) {
		$instance = new self($stringName, "", "");
		return $instance;
	}

       	public static function selectorWithStringNameWithStringType($stringName, $stringType) {
		$instance = new self($stringName, $stringType, "");
		return $instance;
	}

</pre>
==== Classes ====
*	Should start as upper case.
*	If possible always use one file for a single class.
*	The child class must start with the name of the father.
===== Structure =====
===== Examples =====
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	class Example{
		...
	}
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	interface InterfaceExample{
		...
	}
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	class ExampleFatherChild extends ExampleFather{
		...
	}
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	class ExampleFatherChild ex|tends ExampleFather{
		...			|
	}				|
</pre> =>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	class ExampleFatherChild ex|tends
		ExampleFather{	|
		...			|
	}				|
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	class ExempleWithGenericType<S, T extends Element & List>{
		...
	}
</pre>
==== Objects and Variables ====
*	Should start as lower case.
*	Always make getters and setters.
===== Examples =====
*	<code>int idade</code> => <code>int intAge</code>
*	<code>new Database main</code> => <code>new Database databaseMain</code>
===== Constants =====
*	Constants should specify on name.
====== Examples ======
*	<code>const double precoFixo</code> => <code>const double constantDoubleFixedPrice</code>
==== Functions and Methods ====
*	Should start as lower case.
*	The method name should have the parameters.
*	GET and SET prefixes should only be used for those methods that really set and get real variables. And do NOT use IS for boolean variables.
===== Structure =====

====== Examples ======
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	void setStringExampleWithString(String string){
		this.stringExample = string;
	}
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	String getStringExample(){
		return this.stringExample;
	}
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	void example(){
		...
	}
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	int intExample(){
		...
	}
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	int intExampleWithIntVariable(int intVariable){
		...
	}
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	int intExamp|leWithIntVariableWithIntVariable2(int intVariable, int intVariable2){
		...			|
	}				|
</pre> =>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	int intExamp|leWithIntVariableWithIntVariable2(
		int int|Variable, 
		int int|Variable2){
		...			|
	}				|
</pre>
==== Switch ====

===== Structure =====
====== Examples ======
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	switch(intExample){
		case 0:
			...
		break;
		
		case 2:
			...
		break;
		
		case 3:
			...
		break;
		
		default:
			...
	}
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	switch(enumCharExample){
		case EnumExample.constantNoSignal:
			...
		break;
		
		case EnumExample.constantOnline:
			...
		break;
		
		default:
			...
	}
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	switch(enumIntExample){
		case EnumExample.constant|NoSignal:
			...					 |
		break;					 |
								 |
		case EnumExample.constant|Online:
			...					 |
		break;					 |
								 |
		default:				 |
			...					 |
	}				
</pre> =>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	switch(enumIntExample){
		case EnumExample.constant|NoSignal:
			...					 |
		break;					 |
								 |
		case EnumExample.constant|Online:
			...					 |
		break;					 |
								 |
		default:				 |
			...					 |
	}							 |
</pre>
==== Loops ====

===== Structure =====
====== Examples ======
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	while(booleanExample){
		...
	}
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	do{
		...
	}while(booleanExample);
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	for(unsigned int unsignedIntIndex=0; unsignedIntIndex<100; unsignedIntIndex++){
		...
	}
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	for(unsigned int| unsignedIntIndex=0; unsignedIntIndex<100; unsignedIntIndex++){
		...			|
	}				|
</pre> =>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	for(unsigned int| unsignedIntIndex=0; unsignedIntIndex<100; unsignedIntIndex++){
		...	|
	}		|
</pre>
==== Conditionals ====

===== Structure =====
*	Do NOT use "else if", use "else" and inside it "if";
*	Do NOT use ternary operators.
====== Examples ======
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	if(booleanExample){
		...
	}
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	if(booleanExample){
		...
	}else{
		...
	}
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	if(booleanExample){
		...
	}else if(booleanExample2){
		...
	}
</pre> =>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	if(booleanExample){
		...
	}else{
		if(booleanExample2){
			...
		}
	}
</pre>
==== Struct ====
===== Structure =====
*	Write it as a class.
====== Examples ======
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	struct Example {
		int intExample;
		char charExample;
	};
</pre>
==== Enumerator (Enum) ====
===== Structure =====
*	Write it as a class.
*	Type should specify on name (defalult: int), if possible.
====== Examples ======
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	enum Planet{
		constantMercury(3.303e+23, 2.4397e6),
		constantVenus(4.869e+24, 6.0518e6),
		constantEarth(5.976e+24, 6.37814e6),
		constantMars(6.421e+23, 3.3972e6),
		constantJupter(1.9e+27, 7.1492e7),
		constantSaturn(5.688e+26, 6.0268e7),
		constantUranus(8.686e+25, 2.5559e7),
		constantNeptune(1.024e+26, 2.4746e7);
		
		private final double doubleKilogramsMass;
		private final double doubleMetersRadius;
		
		Planet(doubleKilogramsMass, doubleMetersRadius){
			setDoubleKilogramsMass(doubleKilogramsMass);
			setDoubleMetersRadius(doubleMetersRadius);
		}
		
		public double getDoubleKilogramsMass(){
			return this.doubleKilogramsMass;
		}
		
		public double getDoubleMetersRadius(){
			return this.doubleMetersRadius;
		}
		
		private void setDoubleKilogramsMass(double doubleKilogramsMass){
			this.doubleKilogramsMass = doubleKilogramsMass;
		}
		
		public void setDoubleMetersRadius(double doubleMetersRadius){
			this.doubleMetersRadius = doubleMetersRadius;
		}
	}
</pre>
<pre style="white-space: pre-wrap; 
white-space: -moz-pre-wrap; 
white-space: -pre-wrap; 
white-space: -o-pre-wrap; 
word-wrap: break-word;">
	enum IntDay{
		constantSunday,
		constantMonday,
		constantTuesday,
		constantWednesday,
		constantThursday,
		constantFriday,
		constantSaturday;
	}
</pre>