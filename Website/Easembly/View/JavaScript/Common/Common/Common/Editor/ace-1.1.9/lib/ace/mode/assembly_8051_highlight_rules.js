/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from assembly_8051.tmLanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var Assembly8051HighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = { start: 
       [ { token: 'comment.line', regex: ';.*$' },
         { token: 'support.type.asm',
           regex: '\\b(?:dword|qword|tword|db|dw|dd|dq|dt|do|dy|ds|dbit|resb|resw|resd|resq|rest|reso|resy|incbin|equ|times)\\b',
           caseInsensitive: true },
         { token: 'string.section', regex: '\\.(?:data|bss|text)$' },
         { token: 'punctuation.definition.string.begin.asm',
           regex: '["\']',
           push: 
            [ { token: 'punctuation.definition.string.end.asm',
                regex: '["\']',
                next: 'pop' },
              { include: '#string_escaped_char' },
              { include: '#string_placeholder' },
              { defaultToken: 'string.quoted.asm' } ] },
         { token: 'punctuation.definition.string.begin.c',
           regex: '\'',
           push: 
            [ { token: 'punctuation.definition.string.end.c',
                regex: '\'',
                next: 'pop' },
              { include: '#string_escaped_char' },
              { defaultToken: 'string.quoted.single.c' } ] },
         { token: 
            [ 'meta.preprocessor.diagnostic.c',
              'keyword.control.import.error.c' ],
           regex: '^(\\s*[#%]\\s*)(error|warning)\\b',
           push: 
            [ { token: [], regex: '$', next: 'pop' },
              { token: 'punctuation.separator.continuation.c',
                TODO: 'FIXME: regexp doesn\'t have js equivalent'
              },
              { defaultToken: 'meta.preprocessor.diagnostic.c' } ] },
         { token: 
            [ 'meta.preprocessor.c.include',
              'keyword.control.import.include.c',
              'meta.preprocessor.c.include' ],
           regex: '^(\\s*[#%]\\s*)(include|import)\\b(\\s+)',
           push: 
            [ { token: [], regex: '(?=(?://|/\\*))|$', next: 'pop' },
              { token: 'punctuation.separator.continuation.c',
                TODO: 'FIXME: regexp doesn\'t have js equivalent'},
              { token: 'punctuation.definition.string.begin.c',
                regex: '"',
                push: 
                 [ { token: 'punctuation.definition.string.end.c',
                     regex: '"',
                     next: 'pop' },
                   { defaultToken: 'string.quoted.double.include.c' } ] },
              { token: 'punctuation.definition.string.begin.c',
                regex: '<',
                push: 
                 [ { token: 'punctuation.definition.string.end.c',
                     regex: '>',
                     next: 'pop' },
                   { defaultToken: 'string.quoted.other.lt-gt.include.c' } ] },
              { defaultToken: 'meta.preprocessor.c.include' } ] },
         { token: [ 'meta.preprocessor.c', 'keyword.control.import.c' ],
           regex: '^(\\s*[%#]\\s*)(define|defined|elif|else|if|ifdef|ifndef|line|pragma|undef|endif)\\b',
           push: 
            [ { token: [], regex: '(?=(?://|/\\*))|$', next: 'pop' },
              { token: 'punctuation.separator.continuation.c',
                TODO: 'FIXME: regexp doesn\'t have js equivalent'},
              { defaultToken: 'meta.preprocessor.c' } ] },
         { token: 'variable.parameter.regular',
           regex: '\\br[0-7]\\b',
           caseInsensitive: true },
         { token: 'variable.parameter.special',
           regex: '\\b(?:p[0-3]|[pt]con|tmod|t[lh][01]|dp(?:[lh]|tr)|scon|sbuf|i[ep]|sp|psw|a(?:cc)?|b|c|ar[0-7])\\b',
           caseInsensitive: true },
         { token: 'keyword.operator.mnemonic.math',
           regex: '\\b(?:addc?|subb|inc|dec|mul|div|da|clr|cpl|r[lr]c?|swap)\\b',
           caseInsensitive: true },
         { token: 'keyword.operator.mnemonic.logic',
           regex: '\\b(?:an|or|xr)l\\b',
           caseInsensitive: true },
         { token: 'keyword.mnemonic.bool',
           regex: '\\b(?:clr|setb|cpl|anl|orl|mov)\\b',
           caseInsensitive: true },
         { token: 'keyword.control.mnemonic.flow',
           regex: '\\b(?:[al]call|reti?|[als]?jmp|j(?:n?z|n?c|n?b|bc)|cjne|djnz|nop)\\b',
           caseInsensitive: true },
         { token: 'keyword.other.mnemonic.data',
           regex: '\\b(?:mov[cx]?|push|pop|xchd?)\\b',
           caseInsensitive: true },
         { token: 'entity.name.label',
           regex: '^\\s*\\.?\\w+:\\s*(?=$|;)' },
         { token: 'constant.numeric.literal', regex: '\\$[0-9a-f]+\\b' },
         { token: 'constant.numeric.dec', regex: '\\b[0-9]+\\b' },
         { token: 'constant.numeric.hex',
           regex: '\\b[0-9a-fA-F]+[hH]\\b' },
         { token: 'constant.numeric.bin', regex: '\\b[01]+[bB]\\b' },
         { token: 'storage.modifier.indirect',
           regex: '\\@\\w+(?:\\+\\w+)?' },
         { token: 'storage.modifier.immediate',
           regex: '\\#\\w+(?:\\+\\w+)?' },
         { token: 'entity.directive', regex: '^\\.?(?:globl|global)\\b' } ] }
    
    this.normalizeRules();
};

Assembly8051HighlightRules.metaData = { fileTypes: [ 'asm', 'a51' ],
      name: 'Assembly 8051',
      scopeName: 'source.asm.8051' }


oop.inherits(Assembly8051HighlightRules, TextHighlightRules);

exports.Assembly8051HighlightRules = Assembly8051HighlightRules;
});